name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Lint and Type Check
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Type check backend
        run: npm run build

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Type check frontend
        run: cd frontend && npm run build

  # Job 2: Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm run security:audit

      - name: Frontend security audit
        run: cd frontend && npm audit --audit-level=moderate

  # Job 3: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload unit test coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unit-tests
          fail_ci_if_error: true

      - name: Upload coverage reports to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: coverage-unit
          path: coverage/

  # Job 4: Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install frontend dependencies
        run: cd frontend && npm ci

      - name: Run frontend tests
        run: cd frontend && npm test -- --coverage

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend-tests
          fail_ci_if_error: false

  # Job 5: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      typesense:
        image: typesense/typesense:0.25.0
        ports:
          - 8108:8108
        env:
          TYPESENSE_API_KEY: test-api-key
          TYPESENSE_ENABLE_CORS: true
        options: >-
          --health-cmd "curl -f http://localhost:8108/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      meilisearch:
        image: getmeili/meilisearch:v1.5
        ports:
          - 7700:7700
        env:
          MEILI_MASTER_KEY: test-master-key
          MEILI_NO_ANALYTICS: true
        options: >-
          --health-cmd "curl -f http://localhost:7700/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for search services
        run: |
          echo "Waiting for Typesense..."
          curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:8108/health
          echo "Waiting for Meilisearch..."
          curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:7700/health

      - name: Run integration tests
        env:
          TYPESENSE_HOST: localhost
          TYPESENSE_PORT: 8108
          TYPESENSE_API_KEY: test-api-key
          MEILISEARCH_HOST: localhost
          MEILISEARCH_PORT: 7700
          MEILISEARCH_MASTER_KEY: test-master-key
          NODE_ENV: test
        run: npm run test:integration

      - name: Upload integration test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: integration-tests

  # Job 6: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    services:
      typesense:
        image: typesense/typesense:0.25.0
        ports:
          - 8108:8108
        env:
          TYPESENSE_API_KEY: test-api-key
          TYPESENSE_ENABLE_CORS: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start application
        env:
          TYPESENSE_HOST: localhost
          TYPESENSE_PORT: 8108
          TYPESENSE_API_KEY: test-api-key
          NODE_ENV: test
        run: |
          npm run api &
          sleep 10

      - name: Seed test data
        env:
          TYPESENSE_HOST: localhost
          TYPESENSE_PORT: 8108
          TYPESENSE_API_KEY: test-api-key
        run: npm run seed:software

      - name: Run performance benchmarks
        run: npm run bench:load

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: scripts/benchmarks/results/

  # Job 7: Build and Security Scan
  build-and-scan:
    name: Build & Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: fs-search:ci-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'fs-search:ci-${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 8: Deploy (only on main branch)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, security-audit, unit-tests, frontend-tests, integration-tests, build-and-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.CONTAINER_REGISTRY }}/fs-search:latest
            ${{ secrets.CONTAINER_REGISTRY }}/fs-search:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
          # For example, updating Kubernetes deployment or triggering deployment webhook

  # Job 9: Dependency Review (on PRs)
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate
